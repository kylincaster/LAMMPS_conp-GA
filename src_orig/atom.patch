--- atom.cpp	2022-04-03 14:11:52.277128600 +0800
+++ atom_patch.cpp	2022-04-03 14:35:05.903771100 +0800
@@ -2095,7 +2095,7 @@
 
   for (i = 0; i < nbins; i++) binhead[i] = -1;
 
-  for (i = nlocal-1; i >= 0; i--) {
+  for (i = nlocal-1; i >= nfirst; i--) { // i >= nfirst
     ix = static_cast<int> ((x[i][0]-bboxlo[0])*bininvx);
     iy = static_cast<int> ((x[i][1]-bboxlo[1])*bininvy);
     iz = static_cast<int> ((x[i][2]-bboxlo[2])*bininvz);
@@ -2113,7 +2113,7 @@
   // permute = desired permutation of atoms
   // permute[I] = J means Ith new atom will be Jth old atom
 
-  n = 0;
+  n = nfirst; // n = 0;
   for (m = 0; m < nbins; m++) {
     i = binhead[m];
     while (i >= 0) {
@@ -2126,7 +2126,7 @@
   // current[I] = J means Ith current atom is Jth old atom
 
   int *current = next;
-  for (i = 0; i < nlocal; i++) current[i] = i;
+  for (i = nfirst; i < nlocal; i++) current[i] = i; // i = 0
 
   // reorder local atom list, when done, current = permute
   // perform "in place" using copy() to extra atom location at end of list
@@ -2135,7 +2135,7 @@
   // copy after inner-loop moves atom at end of list back into list
   // empty = location in atom list that is currently empty
 
-  for (i = 0; i < nlocal; i++) {
+  for (i = nfirst; i < nlocal; i++) { // i = 0;
     if (current[i] == permute[i]) continue;
     avec->copy(i,nlocal,0);
     empty = i;
